/*
File rapi untuk laporan, bukan untuk di-run.
*/

// Import library for I2C, Wiring, WiFi, and MQTT Publish-Subscribe
#include <Wire.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <PubSubClient.h>

// Include MLX90640 Driver and API
#include "MLX90640_API.h"
#include "MLX90640_I2C_Driver.h"

// Default 7-bit unshifted address of the MLX90640
const byte MLX90640_address = 0x33;

// Default shift for MLX90640 in open air
#define TA_SHIFT 8 

//#define CONFIG_FREERTOS_TASK_STACK_SIZE 4096

static float mlx90640To[768];
paramsMLX90640 mlx90640;

// Initialize WiFi Client and MQTT Client
WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);
const char* mqttServer = "192.168.132.111";
const int mqttPort = 1883;

// WiFi Credentials
const char* ssid = "Leo";
const char* password = "135792468";

// Publish Topic for MQTT
const char* topic_pub = "test/pub";

void setupMQTT(){
	// MQTT Setup on given IP and Port
	mqttClient.setServer(mqttServer, mqttPort);
	mqttClient.setKeepAlive(10);
}

void reconnect() {
	// Reconnect to MQTT Broker
	Serial.println("Connecting to MQTT Broker...");
	while (!mqttClient.connected()) {
		Serial.println("Reconnecting to MQTT Broker..");
		if (mqttClient.connect("ESP32-Client")) {
			Serial.println("Connected.");
			mqttClient.setKeepAlive(10);
		}
		else {
			delay(2000);
		}
	}
}

void setup()
{
	Wire.begin();
	Wire.setClock(400000); // I2C clock speed 400kHz
	
	Serial.begin(115200);
	while (!Serial);
	
	// Detect Sensor
	if (isConnected() == false){
		Serial.println("MLX90640 not detected at default I2C address. Please check wiring. Freezing.");
		while (1);
	}
	Serial.println("MLX90640 online!");

	// Get device parameters
	int status;
	uint16_t eeMLX90640[832];
	status = MLX90640_DumpEE(MLX90640_address, eeMLX90640);
	if (status != 0)
		Serial.println("Failed to load system parameters");

	status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
	if (status != 0){
		Serial.println("Parameter extraction failed");
		Serial.print(" status = ");
		Serial.println(status);
	}

	// Release eeMLX90640 array

	MLX90640_I2CWrite(0x33, 0x800D, 6401);
	MLX90640_SetRefreshRate(MLX90640_address, 0x04);
	 
	// ESP32 Connect to WiFi
	WiFi.mode(WIFI_STA);
	WiFi.begin(ssid, password);

	Serial.println("Connecting to ");
	Serial.print(ssid);

	while(WiFi.waitForConnectResult() != WL_CONNECTED){
		Serial.print(".");
	}
	
	// Show IP address in serial monitor
	Serial.println("");
	Serial.print("Connected to ");
	Serial.println(ssid);
	Serial.print("IP address: ");
	Serial.println(WiFi.localIP());
	
	// Setup MQTT
	setupMQTT();
}

void loop(){
	// Reconnect if disconnected to MQTT Broker
	if (!mqttClient.connected())
		reconnect();
	mqttClient.loop();

	// Read MLX90640 Subpages (2)
	for (byte x = 0 ; x < 2 ; x++){
		uint16_t mlx90640Frame[834];
		int status = MLX90640_GetFrameData(MLX90640_address, mlx90640Frame);
		if (status < 0){
			Serial.print("GetFrame Error: ");
			Serial.println(status);
		}

		// Get Frame Data from MLX90640
		float vdd = MLX90640_GetVdd(mlx90640Frame, &mlx90640);
		float Ta = MLX90640_GetTa(mlx90640Frame, &mlx90640);
		
		// Adjust Reading
		float tr = Ta - TA_SHIFT;
		float emissivity = 0.95;
		MLX90640_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
	}
	
	// Get Maximum Reading
	float maxread = -273.0;
	for (int x = 0 ; x < 10 ; x++){
		if (mlx90640To[x] > maxread){
			maxread = mlx90640To[x];
		}
	}
	
	// Publish data to MQTT if reading is within desired range
	if (maxread < 40){
		char data[8];
		dtostrf(maxread, 1, 2, data);
		Serial.println(data);
		mqttClient.publish(topic_pub, data);
	}
	
	// delay(500);
}

// Detect I2C connection to MLX90640
boolean isConnected()
{
	Wire.beginTransmission((uint8_t)MLX90640_address);
	if (Wire.endTransmission() != 0)
		return(false); //Sensor did not ACK
	return(true);
}
