/*
File rapi untuk laporan, bukan untuk di-run.
*/

// Import library for WiFi, ESP32-CAM wiring pins, and MQTT.
#include "esp_camera.h"
#include "camera_pins.h"
#include <WiFi.h>
#include <PubSubClient.h>

// Define ESP32-CAM Model
#define CAMERA_MODEL_AI_THINKER

// Flash
#define LED_BUILTIN 4
const int MAX_PAYLOAD = 60000;
bool flash;

// Setup WiFi and MQTT Client
WiFiClient espClient;
PubSubClient client(espClient);
bool useMQTT = true;
const char* mqttServer = "192.168.132.111";
const char* HostName = "ESP32-CAM";

// WIFI credentials
const char* ssid = "Leo";
const char* password = "135792468";

// Publish topic for MQTT
const char* topic_PUBLISH = "test/pub2";

void startCameraServer();

void setup() {
	// Define Flash
	pinMode(LED_BUILTIN, OUTPUT);
	
	Serial.begin(115200);
	Serial.setDebugOutput(true);
	Serial.println();
	
	// Configure Camera Settings
	camera_config_t config;
	config.ledc_channel = LEDC_CHANNEL_0;
	config.ledc_timer = LEDC_TIMER_0;
	config.pin_d0 = Y2_GPIO_NUM;
	config.pin_d1 = Y3_GPIO_NUM;
	config.pin_d2 = Y4_GPIO_NUM;
	config.pin_d3 = Y5_GPIO_NUM;
	config.pin_d4 = Y6_GPIO_NUM;
	config.pin_d5 = Y7_GPIO_NUM;
	config.pin_d6 = Y8_GPIO_NUM;
	config.pin_d7 = Y9_GPIO_NUM;
	config.pin_xclk = XCLK_GPIO_NUM;
	config.pin_pclk = PCLK_GPIO_NUM;
	config.pin_vsync = VSYNC_GPIO_NUM;
	config.pin_href = HREF_GPIO_NUM;
	config.pin_sscb_sda = SIOD_GPIO_NUM;
	config.pin_sscb_scl = SIOC_GPIO_NUM;
	config.pin_pwdn = PWDN_GPIO_NUM;
	config.pin_reset = RESET_GPIO_NUM;
	config.xclk_freq_hz = 20000000;
	config.pixel_format = PIXFORMAT_JPEG;
	// Pre-Allocate high buffer
	if (psramFound()) {
		config.frame_size = FRAMESIZE_UXGA;
		config.jpeg_quality = 10;
		config.fb_count = 2;
	} else {
		config.frame_size = FRAMESIZE_SVGA;
		config.jpeg_quality = 12;
		config.fb_count = 1;
	}
	flash = true;

	// Initialise Camera
	esp_err_t err = esp_camera_init(&config);
	if (err != ESP_OK) {
		Serial.printf("Camera init failed with error 0x%x", err);
		return;
	}

	sensor_t * s = esp_camera_sensor_get();
	//Initial sensors are flipped vertically and colors are a bit saturated
	if (s->id.PID == OV3660_PID) {
		s->set_vflip(s, 1);//flip it back
		s->set_brightness(s, 1);//up the blightness just a bit
		s->set_saturation(s, -2);//lower the saturation
	}
	//drop down frame size for higher initial frame rate
	s->set_framesize(s, FRAMESIZE_QVGA);
	
	// Connect to WiFi
	WiFi.begin(ssid, password);
	while (WiFi.status() != WL_CONNECTED) {
		delay(500);
		Serial.print(".");
	}
	Serial.println("WiFi connected");
	startCameraServer();
	
	// Show IP address in serial monitor
	Serial.println("");
	Serial.print("Connected to ");
	Serial.println(ssid);
	Serial.print("IP address: ");
	Serial.println(WiFi.localIP());

	// Set MQTT Connection
	client.setServer(mqttServer, 1883);
	client.setBufferSize(MAX_PAYLOAD); // Maximum payload length
	client.setCallback(callback);
}

void callback(String topic, byte* message, unsigned int length) {
	// Callback Function
	String messageTemp;
	Serial.println(topic);
	for (int i = 0; i < length; i++) {
		messageTemp += (char)message[i];
	}
}

void take_picture() {
	// Function to take picture with ESP-CAM
	camera_fb_t * fb = NULL;
	fb = esp_camera_fb_get();
	if (!fb) {
		Serial.println("Camera capture failed");
		return;
	}
	Serial.println("Picture taken");
	sendMQTT(fb->buf, fb->len);
	// Free buffer memory
	esp_camera_fb_return(fb);
}

void sendMQTT(const uint8_t * buf, uint32_t len) {
	// MQTT Publish Content
	Serial.println("Sending picture...");
	if (len > MAX_PAYLOAD) {
		Serial.print("Picture too large, increase the MAX_PAYLOAD value");
	} else {
		Serial.print("Picture sent ? : ");
		Serial.println(client.publish(topic_PUBLISH, buf, len, false));
	}
}

void reconnect() {
	// Reconnect to MQTT Broker
	while (!client.connected()) {
		Serial.print("Attempting MQTT connection...");
		if (client.connect(HostName)) {
			Serial.println("connected");
		} else {
			Serial.print("failed, rc=");
			Serial.print(client.state());
			Serial.println(" try again in 5 seconds");
			delay(5000);
		}
	}
}

void loop() {
	// Reconnect if disconnected to Broker
	if (!client.connected()){
		reconnect();
	}
	// Call function to take picture
	take_picture();
	client.loop();
}